--- ./Jokerz! (Williams 1988) VPW V1.2/Jokerz! (Williams 1988) VPW V1.2.vbs.original	2023-06-02 07:07:27
+++ ./Jokerz! (Williams 1988) VPW V1.2/Jokerz! (Williams 1988) VPW V1.2.vbs	2023-05-31 14:33:31
@@ -2888,7 +2888,7 @@
 	Private Sub Class_Initialize : redim ballvel(0) : redim ballvelx(0): redim ballvely(0) : End Sub 
 
 	Public Sub Update()	'tracks in-ball-velocity
-		dim str, b, AllBalls, highestID : allBalls = gBOT
+		dim str, b, AllBalls, highestID : allBalls = getballs
 
 		for each b in allballs
 			if b.id >= HighestID then highestID = b.id
\ No newline at end of file
@@ -3908,7 +3908,40 @@
 '****************************************************************
 '		DROP TARGETS INITIALIZATION
 '****************************************************************
+
+Class DropTarget
+  Private m_primary, m_secondary, m_prim, m_sw, m_animate, m_isDropped
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(input): Set m_primary = input: End Property
+
+  Public Property Get Secondary(): Set Secondary = m_secondary: End Property
+  Public Property Let Secondary(input): Set m_secondary = input: End Property
+
+  Public Property Get Prim(): Set Prim = m_prim: End Property
+  Public Property Let Prim(input): Set m_prim = input: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(input): m_sw = input: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(input): m_animate = input: End Property
+
+  Public Property Get IsDropped(): IsDropped = m_isDropped: End Property
+  Public Property Let IsDropped(input): m_isDropped = input: End Property
+
+  Public default Function init(primary, secondary, prim, sw, animate, isDropped)
+    Set m_primary = primary
+    Set m_secondary = secondary
+    Set m_prim = prim
+    m_sw = sw
+    m_animate = animate
+    m_isDropped = isDropped
 
+    Set Init = Me
+  End Function
+End Class
+
 'Define a variable for each drop target
 Dim DT25, DT26, DT27, DT36, DT37, DT38, DT41, DT42, DT43
 
\ No newline at end of file
@@ -3927,16 +3960,17 @@
 '	animate:			Arrary slot for handling the animation instrucitons, set to 0
 '
 '	Values for annimate: 1 - bend target (hit to primary), 2 - drop target (hit to secondary), 3 - brick target (high velocity hit to secondary), -1 - raise target 
+'       isDropped:  Boolean which determines whether a drop target is dropped. Set to false if they are initially raised, true if initially dropped.
 
-DT25 = Array(sw25, sw25o, sw25p, 25, 0)
-DT26 = Array(sw26, sw26o, sw26p, 26, 0)
-DT27 = Array(sw27, sw27o, sw27p, 27, 0)
-DT36 = Array(sw36, sw36o, sw36p, 36, 0)
-DT37 = Array(sw37, sw37o, sw37p, 37, 0)
-DT38 = Array(sw38, sw38o, sw38p, 38, 0)
-DT41 = Array(sw41, sw41o, sw41p, 41, 0)
-DT42 = Array(sw42, sw42o, sw42p, 42, 0)
-DT43 = Array(sw43, sw43o, sw43p, 43, 0)
+Set DT25 = (new DropTarget)(sw25, sw25o, sw25p, 25, 0, false)
+Set DT26 = (new DropTarget)(sw26, sw26o, sw26p, 26, 0, false)
+Set DT27 = (new DropTarget)(sw27, sw27o, sw27p, 27, 0, false)
+Set DT36 = (new DropTarget)(sw36, sw36o, sw36p, 36, 0, false)
+Set DT37 = (new DropTarget)(sw37, sw37o, sw37p, 37, 0, false)
+Set DT38 = (new DropTarget)(sw38, sw38o, sw38p, 38, 0, false)
+Set DT41 = (new DropTarget)(sw41, sw41o, sw41p, 41, 0, false)
+Set DT42 = (new DropTarget)(sw42, sw42o, sw42p, 42, 0, false)
+Set DT43 = (new DropTarget)(sw43, sw43o, sw43p, 43, 0, false)
 
 Dim DTArray
 DTArray = Array(DT25, DT26, DT27, DT36, DT37, DT38, DT41, DT42, DT43)
\ No newline at end of file
@@ -3967,9 +4001,9 @@
 	i = DTArrayID(switch)
 
 	PlayTargetSound
-	DTArray(i)(4) =  DTCheckBrick(Activeball,DTArray(i)(2))
-	If DTArray(i)(4) = 1 or DTArray(i)(4) = 3 or DTArray(i)(4) = 4 Then
-		DTBallPhysics Activeball, DTArray(i)(2).rotz, DTMass
+	DTArray(i).animate =  DTCheckBrick(Activeball,DTArray(i).prim)
+	If DTArray(i).animate = 1 or DTArray(i).animate = 3 or DTArray(i).animate = 4 Then
+		DTBallPhysics Activeball, DTArray(i).prim.rotz, DTMass
 	End If
 	DoDTAnim
 End Sub
\ No newline at end of file
@@ -3978,7 +4012,7 @@
 	Dim i
 	i = DTArrayID(switch)
 
-	DTArray(i)(4) = -1
+	DTArray(i).animate = -1
 	DoDTAnim
 End Sub
 
\ No newline at end of file
@@ -3986,14 +4020,14 @@
 	Dim i
 	i = DTArrayID(switch)
 
-	DTArray(i)(4) = 1
+	DTArray(i).animate = 1
 	DoDTAnim
 End Sub
 
 Function DTArrayID(switch)
 	Dim i
 	For i = 0 to uBound(DTArray) 
-		If DTArray(i)(3) = switch Then DTArrayID = i:Exit Function 
+		If DTArray(i).sw = switch Then DTArrayID = i:Exit Function 
 	Next
 End Function
 
\ No newline at end of file
@@ -4048,7 +4082,7 @@
 Sub DoDTAnim()
 	Dim i
 	For i=0 to Ubound(DTArray)
-		DTArray(i)(4) = DTAnimate(DTArray(i)(0),DTArray(i)(1),DTArray(i)(2),DTArray(i)(3),DTArray(i)(4))
+		DTArray(i).animate = DTAnimate(DTArray(i).primary,DTArray(i).secondary,DTArray(i).prim,DTArray(i).sw,DTArray(i).animate)
 	Next
 End Sub
 
\ No newline at end of file
@@ -4229,7 +4263,36 @@
 '****************************************************************
 '		STAND-UP TARGET INITIALIZATION
 '****************************************************************
+
+Class StandupTarget
+  Private m_primary, m_prim, m_sw, m_animate, m_target
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(input): Set m_primary = input: End Property
+
+  Public Property Get Prim(): Set Prim = m_prim: End Property
+  Public Property Let Prim(input): Set m_prim = input: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(input): m_sw = input: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(input): m_animate = input: End Property
+
+  Public Property Get Target(): Target = m_target: End Property
+  Public Property Let Target(input): m_target = input: End Property
 
+  Public default Function init(primary, prim, sw, animate, target)
+    Set m_primary = primary
+    Set m_prim = prim
+    m_sw = sw
+    m_animate = animate
+    m_target = target
+
+    Set Init = Me
+  End Function
+End Class
+
 'Define a variable for each stand-up target
 Dim ST24, ST52
 
\ No newline at end of file
@@ -4244,8 +4307,8 @@
 '	animate:			Arrary slot for handling the animation instructions, set to 0
 '	target identifier:	The target
 
-ST24 = Array(sw24, sw24p, 24, 0, 24)
-ST52 = Array(sw52, sw52p, 52, 0, 52)
+Set ST24 = (new StandupTarget)(sw24, sw24p, 24, 0, 24)
+Set ST52 = (new StandupTarget)(sw52, sw52p, 52, 0, 52)
 
 'Add all the Stand-up Target Arrays to Stand-up Target Animation Array
 ' STAnimationArray = Array(ST1, ST2, ....)
\ No newline at end of file
@@ -4267,10 +4330,10 @@
 	i = STArrayID(switch)
 
 '	PlayTargetSound		'Replaced with Fleep Code
-	STArray(i)(3) =  STCheckHit(Activeball,STArray(i)(0))
+	STArray(i).animate =  STCheckHit(Activeball,STArray(i).primary)
 
-	If STArray(i)(3) <> 0 Then
-		DTBallPhysics Activeball, STArray(i)(0).orientation, STMass
+	If STArray(i).animate <> 0 Then
+		DTBallPhysics Activeball, STArray(i).primary.orientation, STMass
 	End If
 	DoSTAnim
 End Sub
\ No newline at end of file
@@ -4278,7 +4341,7 @@
 Function STArrayID(switch)
 	Dim i
 	For i = 0 to uBound(STArray) 
-		If STArray(i)(4) = switch Then STArrayID = i:Exit Function 
+		If STArray(i).target = switch Then STArrayID = i:Exit Function 
 	Next
 End Function
 
\ No newline at end of file
@@ -4302,7 +4365,7 @@
 Sub DoSTAnim()
 	Dim i
 	For i=0 to Ubound(STArray)
-		STArray(i)(3) = STAnimate(STArray(i)(0),STArray(i)(1),STArray(i)(2),STArray(i)(3))
+		STArray(i).animate = STAnimate(STArray(i).primary,STArray(i).prim,STArray(i).sw,STArray(i).animate)
 	Next
 End Sub
 
\ No newline at end of file
