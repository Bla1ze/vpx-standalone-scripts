--- ./Galaxy (Stern 1980)/Galaxy (Stern 1980).vbs.original	2023-06-02 15:28:14
+++ ./Galaxy (Stern 1980)/Galaxy (Stern 1980).vbs	2023-06-02 15:28:06
@@ -3082,7 +3082,40 @@
 '******************************************************
 '  DROP TARGETS INITIALIZATION
 '******************************************************
+
+Class DropTarget
+  Private m_primary, m_secondary, m_prim, m_sw, m_animate, m_isDropped
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(primary): Set m_primary = primary: End Property
+
+  Public Property Get Secondary(): Set Secondary = m_secondary: End Property
+  Public Property Let Secondary(secondary): Set m_secondary = secondary: End Property
+
+  Public Property Get Prim(): Set Prim = m_prim: End Property
+  Public Property Let Prim(prim): Set m_prim = prim: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(sw): m_sw = sw: End Property
 
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(animate): m_animate = animate: End Property
+
+  Public Property Get IsDropped(): IsDropped = m_isDropped: End Property
+  Public Property Let IsDropped(isDropped): m_isDropped = isDropped: End Property
+
+  Public default Function init(primary, secondary, prim, sw, animate, isDropped)
+    Set m_primary = primary
+    Set m_secondary = secondary
+    Set m_prim = prim
+    m_sw = sw
+    m_animate = animate
+    m_isDropped = isDropped
+
+    Set Init = Me
+  End Function
+End Class
+
 'Define a variable for each drop target
 Dim DT4, DT11, DT10, DT9
 
@@ -3102,12 +3135,12 @@
 '						Values for animate: 1 - bend target (hit to primary), 2 - drop target (hit to secondary), 3 - brick target (high velocity hit to secondary), -1 - raise target 
 '   isDropped:			Boolean which determines whether a drop target is dropped. Set to false if they are initially raised, true if initially dropped.
 
-DT4 = Array(sw4, sw4a, sw4p, 4, 0, false)
-DT11 = Array(sw11, sw11a, sw11p, 11, 0, false)
-DT10 = Array(sw10, sw10a, sw10p, 10, 0, false)
-DT9 = Array(sw9, sw9a, sw9p, 9, 0, false)
-'DT57 = Array(sw57, sw57a, sw57p, 57, 0, false)
-'DT59 = Array(sw59, sw59a, sw59p, 59, 0, false)
+Set DT4 = (new DropTarget)(sw4, sw4a, sw4p, 4, 0, false)
+Set DT11 = (new DropTarget)(sw11, sw11a, sw11p, 11, 0, false)
+Set DT10 = (new DropTarget)(sw10, sw10a, sw10p, 10, 0, false)
+Set DT9 = (new DropTarget)(sw9, sw9a, sw9p, 9, 0, false)
+'Set DT57 = (new DropTarget)(sw57, sw57a, sw57p, 57, 0, false)
+'Set DT59 = (new DropTarget)(sw59, sw59a, sw59p, 59, 0, false)
 
 Dim DTArray
 DTArray = Array(DT4, DT11, DT10, DT9)
@@ -3139,9 +3172,9 @@
 	i = DTArrayID(switch)
 
 	PlayTargetSound
-	DTArray(i)(4) =  DTCheckBrick(Activeball,DTArray(i)(2))
-	If DTArray(i)(4) = 1 or DTArray(i)(4) = 3 or DTArray(i)(4) = 4 Then
-		DTBallPhysics Activeball, DTArray(i)(2).rotz, DTMass
+	DTArray(i).animate =  DTCheckBrick(Activeball,DTArray(i).prim)
+	If DTArray(i).animate = 1 or DTArray(i).animate = 3 or DTArray(i).animate = 4 Then
+		DTBallPhysics Activeball, DTArray(i).prim.rotz, DTMass
 	End If
 	DoDTAnim
 End Sub
@@ -3150,7 +3183,7 @@
 	Dim i
 	i = DTArrayID(switch)
 
-	DTArray(i)(4) = -1
+	DTArray(i).animate = -1
 	DoDTAnim
 End Sub
 
@@ -3158,14 +3191,14 @@
 	Dim i
 	i = DTArrayID(switch)
 
-	DTArray(i)(4) = 1
+	DTArray(i).animate = 1
 	DoDTAnim
 End Sub
 
 Function DTArrayID(switch)
 	Dim i
 	For i = 0 to uBound(DTArray) 
-		If DTArray(i)(3) = switch Then DTArrayID = i:Exit Function 
+		If DTArray(i).sw = switch Then DTArrayID = i:Exit Function 
 	Next
 End Function
 
@@ -3220,7 +3253,7 @@
 Sub DoDTAnim()
 	Dim i
 	For i=0 to Ubound(DTArray)
-		DTArray(i)(4) = DTAnimate(DTArray(i)(0),DTArray(i)(1),DTArray(i)(2),DTArray(i)(3),DTArray(i)(4))
+		DTArray(i).animate = DTAnimate(DTArray(i).primary,DTArray(i).secondary,DTArray(i).prim,DTArray(i).sw,DTArray(i).animate)
 	Next
 End Sub
 
@@ -3276,7 +3309,7 @@
 		if prim.transz <= -DTDropUnits Then 
 			prim.transz = -DTDropUnits
 			secondary.collidable = 0
-			DTArray(ind)(5) = true 'Mark target as dropped
+			DTArray(ind).isDropped = true 'Mark target as dropped
 			controller.Switch(Switchid) = 1
 			primary.uservalue = 0
 			DTAnimate = 0
@@ -3331,7 +3364,7 @@
 		end if
 		primary.collidable = 0
 		secondary.collidable = 1
-		DTArray(ind)(5) = false 'Mark target as not dropped
+		DTArray(ind).isDropped = false 'Mark target as not dropped
 		controller.Switch(Switchid) = 0
 
 	End If
@@ -3405,6 +3438,31 @@
 '	ZRST: STAND-UP TARGET INITIALIZATION
 '******************************************************
 
+Class StandupTarget
+  Private m_primary, m_prim, m_sw, m_animate
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(primary): Set m_primary = primary: End Property
+
+  Public Property Get Prim(): Set Prim = m_prim: End Property
+  Public Property Let Prim(prim): Set m_prim = prim: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(sw): m_sw = sw: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(animate): m_animate = animate: End Property
+
+  Public default Function init(primary, prim, sw, animate)
+    Set m_primary = primary
+    Set m_prim = prim
+    m_sw = sw
+    m_animate = animate
+
+    Set Init = Me
+  End Function
+End Class
+
 'Define a variable for each stand-up target
 Dim ST26, ST29, ST30
 
@@ -3421,9 +3479,9 @@
 'You will also need to add a secondary hit object for each stand up (name sw11o, sw12o, and sw13o on the example Table1)
 'these are inclined primitives to simulate hitting a bent target and should provide so z velocity on high speed impacts
 
-ST26 = Array(sw26, sw26p, 26, 0)
-ST29 = Array(sw29, sw29p, 29, 0)
-ST30 = Array(sw30, sw30p, 30, 0)
+Set ST26 = (new StandupTarget)(sw26, sw26p, 26, 0)
+Set ST29 = (new StandupTarget)(sw29, sw29p, 29, 0)
+Set ST30 = (new StandupTarget)(sw30, sw30p, 30, 0)
 
 'Add all the Stand-up Target Arrays to Stand-up Target Animation Array
 ' STAnimationArray = Array(ST1, ST2, ....)
@@ -3445,10 +3503,10 @@
 	i = STArrayID(switch)
 
 	PlayTargetSound
-	STArray(i)(3) =  STCheckHit(Activeball,STArray(i)(0))
+	STArray(i).animate =  STCheckHit(Activeball,STArray(i).primary)
 
-	If STArray(i)(3) <> 0 Then
-		DTBallPhysics Activeball, STArray(i)(0).orientation, STMass
+	If STArray(i).animate <> 0 Then
+		DTBallPhysics Activeball, STArray(i).primary.orientation, STMass
 	End If
 	DoSTAnim
 End Sub
@@ -3456,7 +3514,7 @@
 Function STArrayID(switch)
 	Dim i
 	For i = 0 to uBound(STArray) 
-		If STArray(i)(2) = switch Then STArrayID = i:Exit Function 
+		If STArray(i).sw = switch Then STArrayID = i:Exit Function 
 	Next
 End Function
 
@@ -3485,7 +3543,7 @@
 Sub DoSTAnim()
 	Dim i
 	For i=0 to Ubound(STArray)
-		STArray(i)(3) = STAnimate(STArray(i)(0),STArray(i)(1),STArray(i)(2),STArray(i)(3))
+		STArray(i).animate = STAnimate(STArray(i).primary,STArray(i).prim,STArray(i).sw,STArray(i).animate)
 	Next
 End Sub
 
