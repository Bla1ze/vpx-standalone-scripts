--- AC-DC LUCI Premium VR (Stern 2013) v1.1.3.vbs.original
+++ AC-DC LUCI Premium VR (Stern 2013) v1.1.3.vbs
@@ -333,2 +333,2 @@
-		if DTarray(i)(2).transz <> 0 then ' this seems like not an ideal way to do this
-			Controller.switch(DTarray(i)(3) ) = 1 
+		if DTArray(i).prim.transz <> 0 then ' this seems like not an ideal way to do this
+			Controller.switch(DTArray(i).sw ) = 1
@@ -1019 +1019 @@
-	CageBall.ID = 1000 ' this should stop RollingUpdate from working on the caged ball
+	CageBall.userValue = "CageBall" ' this should stop RollingUpdate from working on the caged ball
@@ -1024 +1024 @@
-	ColBall.ID = 999
+	ColBall.userValue = "ColBall"
@@ -1187 +1187 @@
-	if ball1.id = 999 or ball2.id = 999 then ' 1: if bell collision is detected...
+	if ball1.userValue = "ColBall" or ball2.userValue = "ColBall" then ' 1: if bell collision is detected...
@@ -1576 +1576,7 @@
-			if b.id < 999 then ' Regular Ball - drop in shooter lane
+			if b.userValue = "CageBall" then ' bell CageBell
+				b.x = Bellk.x
+				b.y = Bellk.y
+				b.z = CageHeight + 30
+			elseif b.userValue = "ColBall" then	' bell ColBall
+				ColBall_Kill()
+			else
@@ -1580,6 +1585,0 @@
-			elseif b.id = 1000 then ' bell CageBell
-				b.x = BellK.x
-				b.y = BellK.y
-				b.z = CageHeight + 30
-			elseif b.id = 999 then	' bell ColBall
-				ColBall_Kill()
@@ -1587 +1586,0 @@
-
@@ -3451,0 +3451,33 @@
+Class DropTarget
+  Private m_primary, m_secondary, m_prim, m_sw, m_animate, m_isDropped
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(input): Set m_primary = input: End Property
+
+  Public Property Get Secondary(): Set Secondary = m_secondary: End Property
+  Public Property Let Secondary(input): Set m_secondary = input: End Property
+
+  Public Property Get Prim(): Set Prim = m_prim: End Property
+  Public Property Let Prim(input): Set m_prim = input: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(input): m_sw = input: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(input): m_animate = input: End Property
+
+  Public Property Get IsDropped(): IsDropped = m_isDropped: End Property
+  Public Property Let IsDropped(input): m_isDropped = input: End Property
+
+  Public default Function init(primary, secondary, prim, sw, animate, isDropped)
+    Set m_primary = primary
+    Set m_secondary = secondary
+    Set m_prim = prim
+    m_sw = sw
+    m_animate = animate
+    m_isDropped = isDropped
+
+    Set Init = Me
+  End Function
+End Class
+
@@ -3471,8 +3503,8 @@
-DT1 = Array(sw1, sw1a, sw1p, 1, 0)
-DT2 = Array(sw2, sw2a, sw2p, 2, 0)
-DT3 = Array(sw3, sw3a, sw3p, 3, 0)
-DT4 = Array(sw4, sw4a, sw4p, 4, 0)
-DT5 = Array(sw5, sw5a, sw5p, 5, 0)
-DT10 = Array(sw10, sw10a, sw10p, 10, 0)
-DT11 = Array(sw11, sw11a, sw11p, 11, 0)
-DT12 = Array(sw12, sw12a, sw12p, 12, 0)
+Set DT1 = (new DropTarget)(sw1, sw1a, sw1p, 1, 0, false)
+Set DT2 = (new DropTarget)(sw2, sw2a, sw2p, 2, 0, false)
+Set DT3 = (new DropTarget)(sw3, sw3a, sw3p, 3, 0, false)
+Set DT4 = (new DropTarget)(sw4, sw4a, sw4p, 4, 0, false)
+Set DT5 = (new DropTarget)(sw5, sw5a, sw5p, 5, 0, false)
+Set DT10 = (new DropTarget)(sw10, sw10a, sw10p, 10, 0, false)
+Set DT11 = (new DropTarget)(sw11, sw11a, sw11p, 11, 0, false)
+Set DT12 = (new DropTarget)(sw12, sw12a, sw12p, 12, 0, false)
@@ -3511,3 +3543,3 @@
-	DTArray(i)(4) =  DTCheckBrick(Activeball,DTArray(i)(2))
-	If DTArray(i)(4) = 1 or DTArray(i)(4) = 3 or DTArray(i)(4) = 4 Then
-		DTBallPhysics Activeball, DTArray(i)(2).rotz, DTMass
+	DTArray(i).animate =  DTCheckBrick(Activeball,DTArray(i).prim)
+	If DTArray(i).animate = 1 or DTArray(i).animate = 3 or DTArray(i).animate = 4 Then
+		DTBallPhysics Activeball, DTArray(i).prim.rotz, DTMass
@@ -3522 +3554 @@
-	DTArray(i)(4) = -1
+	DTArray(i).animate = -1
@@ -3530 +3562 @@
-	DTArray(i)(4) = 1
+	DTArray(i).animate = 1
@@ -3537 +3569 @@
-		If DTArray(i)(3) = switch Then DTArrayID = i:Exit Function 
+		If DTArray(i).sw = switch Then DTArrayID = i:Exit Function
@@ -3592 +3624 @@
-		DTArray(i)(4) = DTAnimate(DTArray(i)(0),DTArray(i)(1),DTArray(i)(2),DTArray(i)(3),DTArray(i)(4))
+		DTArray(i).animate = DTAnimate(DTArray(i).primary,DTArray(i).secondary,DTArray(i).prim,DTArray(i).sw,DTArray(i).animate)
@@ -5318 +5350,3 @@
-        else u = 0 end if
+        else
+            u = 0
+        end if
@@ -5323 +5357,3 @@
-        else keygrad1 = 0 end if
+        else
+            keygrad1 = 0
+        end if
@@ -5328 +5364,3 @@
-        else keygrad2 = 0 end if
+        else
+            keygrad2 = 0
+        end if
