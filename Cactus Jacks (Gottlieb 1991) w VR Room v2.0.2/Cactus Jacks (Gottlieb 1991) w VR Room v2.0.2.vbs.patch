--- Cactus Jacks (Gottlieb 1991) w VR Room v2.0.2.vbs.original
+++ Cactus Jacks (Gottlieb 1991) w VR Room v2.0.2.vbs
@@ -1547 +1547,2 @@
-		FlBG20.visible = 0	End If 
+		FlBG20.visible = 0
+	End If 
@@ -1555 +1556,2 @@
-		FlBG21.visible = 0	End If 
+		FlBG21.visible = 0
+	End If 
@@ -1563 +1565,2 @@
-		FlBG22.visible = 0	End If 
+		FlBG22.visible = 0
+	End If 
@@ -1571 +1574,2 @@
-		FlBG24.visible = 0	End If 
+		FlBG24.visible = 0
+	End If 
@@ -2621 +2625 @@
-		dim str, b, highestID
+		dim str, b, AllBalls, highestID : allBalls = getballs
@@ -2623 +2627 @@
-		for each b in gBOT
+		for each b in allBalls
@@ -2631 +2635 @@
-		for each b in gBOT
+		for each b in allBalls
@@ -2669,0 +2674,33 @@
+Class DropTarget
+	Private m_primary, m_secondary, m_prim, m_sw, m_animate, m_isDropped
+  
+	Public Property Get Primary(): Set Primary = m_primary: End Property
+	Public Property Let Primary(input): Set m_primary = input: End Property
+  
+	Public Property Get Secondary(): Set Secondary = m_secondary: End Property
+	Public Property Let Secondary(input): Set m_secondary = input: End Property
+  
+	Public Property Get Prim(): Set Prim = m_prim: End Property
+	Public Property Let Prim(input): Set m_prim = input: End Property
+  
+	Public Property Get Sw(): Sw = m_sw: End Property
+	Public Property Let Sw(input): m_sw = input: End Property
+  
+	Public Property Get Animate(): Animate = m_animate: End Property
+	Public Property Let Animate(input): m_animate = input: End Property
+  
+	Public Property Get IsDropped(): IsDropped = m_isDropped: End Property
+	Public Property Let IsDropped(input): m_isDropped = input: End Property
+  
+	Public default Function init(primary, secondary, prim, sw, animate, isDropped)
+	  Set m_primary = primary
+	  Set m_secondary = secondary
+	  Set m_prim = prim
+	  m_sw = sw
+	  m_animate = animate
+	  m_isDropped = isDropped
+  
+	  Set Init = Me
+	End Function
+  End Class
+
@@ -2697,8 +2734,8 @@
-DT16 = Array(sw16, sw16a, sw16p, 16, 0)
-DT26 = Array(sw26, sw26a, sw26p, 26, 0)
-DT36 = Array(sw36, sw36a, sw36p, 36, 0)
-DT46 = Array(sw46, sw46a, sw46p, 46, 0)
-DT17 = Array(sw17, sw17a, sw17p, 17, 0)
-DT27 = Array(sw27, sw27a, sw27p, 27, 0)
-DT37 = Array(sw37, sw37a, sw37p, 37, 0)
-DT47 = Array(sw47, sw47a, sw47p, 47, 0)
+Set DT16 = (new DropTarget)(sw16, sw16a, sw16p, 16, 0, false)
+Set DT26 = (new DropTarget)(sw26, sw26a, sw26p, 26, 0, false)
+Set DT36 = (new DropTarget)(sw36, sw36a, sw36p, 36, 0, false)
+Set DT46 = (new DropTarget)(sw46, sw46a, sw46p, 46, 0, false)
+Set DT17 = (new DropTarget)(sw17, sw17a, sw17p, 17, 0, false)
+Set DT27 = (new DropTarget)(sw27, sw27a, sw27p, 27, 0, false)
+Set DT37 = (new DropTarget)(sw37, sw37a, sw37p, 37, 0, false)
+Set DT47 = (new DropTarget)(sw47, sw47a, sw47p, 47, 0, false)
@@ -2737,3 +2774,3 @@
-	DTArray(i)(4) =  DTCheckBrick(Activeball,DTArray(i)(2))
-	If DTArray(i)(4) = 1 or DTArray(i)(4) = 3 or DTArray(i)(4) = 4 Then
-		DTBallPhysics Activeball, DTArray(i)(2).rotz, DTMass
+	DTArray(i).animate = DTCheckBrick(Activeball,DTArray(i).prim)
+	If DTArray(i).animate = 1 or DTArray(i).animate = 3 or DTArray(i).animate = 4 Then
+		DTBallPhysics Activeball, DTArray(i).prim.rotz, DTMass
@@ -2748 +2785 @@
-	DTArray(i)(4) = -1
+	DTArray(i).animate = -1
@@ -2756 +2793 @@
-	DTArray(i)(4) = 1
+	DTArray(i).animate = 1
@@ -2763 +2800 @@
-		If DTArray(i)(3) = switch Then DTArrayID = i:Exit Function 
+		If DTArray(i).sw = switch Then DTArrayID = i:Exit Function 
@@ -2818 +2855 @@
-		DTArray(i)(4) = DTAnimate(DTArray(i)(0),DTArray(i)(1),DTArray(i)(2),DTArray(i)(3),DTArray(i)(4))
+		DTArray(i).animate = DTAnimate(DTArray(i).primary,DTArray(i).secondary,DTArray(i).prim,DTArray(i).sw,DTArray(i).animate)
@@ -2994,0 +3032,25 @@
+Class StandupTarget
+	Private m_primary, m_prim, m_sw, m_animate
+  
+	Public Property Get Primary(): Set Primary = m_primary: End Property
+	Public Property Let Primary(input): Set m_primary = input: End Property
+  
+	Public Property Get Prim(): Set Prim = m_prim: End Property
+	Public Property Let Prim(input): Set m_prim = input: End Property
+  
+	Public Property Get Sw(): Sw = m_sw: End Property
+	Public Property Let Sw(input): m_sw = input: End Property
+  
+	Public Property Get Animate(): Animate = m_animate: End Property
+	Public Property Let Animate(input): m_animate = input: End Property
+  
+	Public default Function init(primary, prim, sw, animate)
+	  Set m_primary = primary
+	  Set m_prim = prim
+	  m_sw = sw
+	  m_animate = animate
+  
+	  Set Init = Me
+	End Function
+  End Class
+
@@ -3013,4 +3075,4 @@
-ST20 = Array(sw20, psw20,20, 0)
-ST30 = Array(sw30, psw30,30, 0)
-ST40 = Array(sw40, psw40,40, 0)
-ST41 = Array(sw41, psw41,41, 0)
+Set ST20 = (new StandupTarget)(sw20, psw20,20, 0)
+Set ST30 = (new StandupTarget)(sw30, psw30,30, 0)
+Set ST40 = (new StandupTarget)(sw40, psw40,40, 0)
+Set ST41 = (new StandupTarget)(sw41, psw41,41, 0)
@@ -3041 +3103 @@
-	STArray(i)(3) =  STCheckHit(Activeball,STArray(i)(0))
+	STArray(i).animate =  STCheckHit(Activeball,STArray(i).primary)
@@ -3043,2 +3105,2 @@
-	If STArray(i)(3) <> 0 Then
-		DTBallPhysics Activeball, STArray(i)(0).orientation, STMass
+	If STArray(i).animate <> 0 Then
+		DTBallPhysics Activeball, STArray(i).primary.orientation, STMass
@@ -3052 +3114 @@
-		If STArray(i)(2) = switch Then STArrayID = i:Exit Function 
+		If STArray(i).sw = switch Then STArrayID = i:Exit Function 
@@ -3081 +3143 @@
-		STArray(i)(3) = STAnimate(STArray(i)(0),STArray(i)(1),STArray(i)(2),STArray(i)(3))
+		STArray(i).animate = STAnimate(STArray(i).primary,STArray(i).prim,STArray(i).sw,STArray(i).animate)
