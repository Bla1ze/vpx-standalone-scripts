--- ./Guns N Roses (Data East 1994) VPW v1.0/Guns N Roses (Data East 1994) VPW v1.0.vbs.original	2023-10-01 23:37:13
+++ ./Guns N Roses (Data East 1994) VPW v1.0/Guns N Roses (Data East 1994) VPW v1.0.vbs	2023-10-01 23:38:57
@@ -3506,7 +3506,7 @@
 	Private Sub Class_Initialize : redim ballvel(0) : redim ballvelx(0): redim ballvely(0) : End Sub 
 
 	Public Sub Update	'tracks in-ball-velocity
-		dim str, b, AllBalls, highestID : allBalls = gBOT
+		dim str, b, AllBalls, highestID : allBalls = getballs
 
 		for each b in allballs
 			if b.id >= HighestID then highestID = b.id
@@ -3557,7 +3557,40 @@
 '******************************************************
 '  DROP TARGETS INITIALIZATION
 '******************************************************
+
+Class DropTarget
+  Private m_primary, m_secondary, m_prim, m_sw, m_animate, m_isDropped
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(input): Set m_primary = input: End Property
+
+  Public Property Get Secondary(): Set Secondary = m_secondary: End Property
+  Public Property Let Secondary(input): Set m_secondary = input: End Property
+
+  Public Property Get Prim(): Prim = m_prim: End Property
+  Public Property Let Prim(input): m_prim = input: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(input): m_sw = input: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(input): m_animate = input: End Property
+
+  Public Property Get IsDropped(): IsDropped = m_isDropped: End Property
+  Public Property Let IsDropped(input): m_isDropped = input: End Property
+
+  Public default Function init(primary, secondary, prim, sw, animate, isDropped)
+    Set m_primary = primary
+    Set m_secondary = secondary
+    m_prim = prim
+    m_sw = sw
+    m_animate = animate
+    m_isDropped = isDropped
 
+    Set Init = Me
+  End Function
+End Class
+
 'Define a variable for each drop target
 Dim DT33, DT34, DT35, DT36, DT57, DT59
 
@@ -3577,12 +3610,12 @@
 '						Values for animate: 1 - bend target (hit to primary), 2 - drop target (hit to secondary), 3 - brick target (high velocity hit to secondary), -1 - raise target 
 '   isDropped:			Boolean which determines whether a drop target is dropped. Set to false if they are initially raised, true if initially dropped.
 
-DT33 = Array(sw33, sw33a, BP_sw33, 33, 0, false)
-DT34 = Array(sw34, sw34a, BP_sw34, 34, 0, false)
-DT35 = Array(sw35, sw35a, BP_sw35, 35, 0, false)
-DT36 = Array(sw36, sw36a, BP_sw36, 36, 0, false)
-DT57 = Array(sw57, sw57a, BP_sw57, 57, 0, false)
-DT59 = Array(sw59, sw59a, BP_sw59, 59, 0, false)
+Set DT33 = (new DropTarget)(sw33, sw33a, BP_sw33, 33, 0, false)
+Set DT34 = (new DropTarget)(sw34, sw34a, BP_sw34, 34, 0, false)
+Set DT35 = (new DropTarget)(sw35, sw35a, BP_sw35, 35, 0, false)
+Set DT36 = (new DropTarget)(sw36, sw36a, BP_sw36, 36, 0, false)
+Set DT57 = (new DropTarget)(sw57, sw57a, BP_sw57, 57, 0, false)
+Set DT59 = (new DropTarget)(sw59, sw59a, BP_sw59, 59, 0, false)
 
 Dim DTArray
 DTArray = Array(DT33, DT34, DT35, DT36, DT57, DT59)
@@ -3614,9 +3647,10 @@
 	i = DTArrayID(switch)
 
 	PlayTargetSound
-	DTArray(i)(4) =  DTCheckBrick(Activeball,DTArray(i)(2)(0))
-	If DTArray(i)(4) = 1 or DTArray(i)(4) = 3 or DTArray(i)(4) = 4 Then
-		DTBallPhysics Activeball, DTArray(i)(2)(0).rotz, DTMass
+	Dim prim : prim = DTArray(i).prim
+	DTArray(i).animate =  DTCheckBrick(Activeball,prim(0))
+	If DTArray(i).animate = 1 or DTArray(i).animate = 3 or DTArray(i).animate = 4 Then
+		DTBallPhysics Activeball, prim(0).rotz, DTMass
 	End If
 	DoDTAnim
 End Sub
@@ -3625,7 +3659,7 @@
 	Dim i
 	i = DTArrayID(switch)
 
-	DTArray(i)(4) = -1
+	DTArray(i).animate = -1
 	DoDTAnim
 End Sub
 
@@ -3633,14 +3667,14 @@
 	Dim i
 	i = DTArrayID(switch)
 
-	DTArray(i)(4) = 1
+	DTArray(i).animate = 1
 	DoDTAnim
 End Sub
 
 Function DTArrayID(switch)
 	Dim i
 	For i = 0 to uBound(DTArray) 
-		If DTArray(i)(3) = switch Then
+		If DTArray(i).sw = switch Then
 			DTArrayID = i
 			Exit Function 
 		End If
@@ -3698,7 +3732,7 @@
 Sub DoDTAnim()
 	Dim i
 	For i=0 to Ubound(DTArray)
-		DTArray(i)(4) = DTAnimate(DTArray(i)(0),DTArray(i)(1),DTArray(i)(2),DTArray(i)(3),DTArray(i)(4))
+		DTArray(i).animate = DTAnimate(DTArray(i).primary,DTArray(i).secondary,DTArray(i).prim,DTArray(i).sw,DTArray(i).animate)
 	Next
 End Sub
 
@@ -3749,7 +3783,7 @@
 		if prim.transz <= -DTDropUnits Then 
 			prim.transz = -DTDropUnits
 			secondary.collidable = 0
-			DTArray(ind)(5) = true 'Mark target as dropped
+			DTArray(ind).isDropped = true 'Mark target as dropped
 			controller.Switch(Switchid) = 1
 			primary.uservalue = 0
 			DTAnimate = 0
@@ -3793,7 +3827,7 @@
 		end if
 		primary.collidable = 0
 		secondary.collidable = 1
-		DTArray(ind)(5) = false 'Mark target as not dropped
+		DTArray(ind).isDropped = false 'Mark target as not dropped
 		controller.Switch(Switchid) = 0
 	ElseIf animate = -2 and animtime > DTRaiseDelay Then
 		prim.transz = (animtime - DTRaiseDelay)/DTDropSpeed *  DTDropUnits * -1 + DTDropUpUnits 
@@ -3862,6 +3896,31 @@
 '		STAND-UP TARGET INITIALIZATION
 '******************************************************
 
+Class StandupTarget
+  Private m_primary, m_prim, m_sw, m_animate
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(input): Set m_primary = input: End Property
+
+  Public Property Get Prim(): Prim = m_prim: End Property
+  Public Property Let Prim(input): m_prim = input: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(input): m_sw = input: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(input): m_animate = input: End Property
+
+  Public default Function init(primary, prim, sw, animate)
+    Set m_primary = primary
+    m_prim = prim
+    m_sw = sw
+    m_animate = animate
+
+    Set Init = Me
+  End Function
+End Class
+
 'Define a variable for each stand-up target
 Dim ST17, ST18, ST19, ST20
 
@@ -3878,10 +3937,10 @@
 'You will also need to add a secondary hit object for each stand up (name sw11o, sw12o, and sw13o on the example Table1)
 'these are inclined primitives to simulate hitting a bent target and should provide so z velocity on high speed impacts
 
-ST17 = Array(sw17, BP_sw17, 17, 0)
-ST18 = Array(sw18, BP_sw18, 18, 0)
-ST19 = Array(sw19, BP_sw19, 19, 0)
-ST20 = Array(sw20, BP_sw20, 20, 0)
+Set ST17 = (new StandupTarget)(sw17, BP_sw17, 17, 0)
+Set ST18 = (new StandupTarget)(sw18, BP_sw18, 18, 0)
+Set ST19 = (new StandupTarget)(sw19, BP_sw19, 19, 0)
+Set ST20 = (new StandupTarget)(sw20, BP_sw20, 20, 0)
 
 'Add all the Stand-up Target Arrays to Stand-up Target Animation Array
 ' STAnimationArray = Array(ST1, ST2, ....)
@@ -3903,10 +3962,10 @@
 	i = STArrayID(switch)
 
 	PlayTargetSound
-	STArray(i)(3) =  STCheckHit(Activeball,STArray(i)(0))
+	STArray(i).animate =  STCheckHit(Activeball,STArray(i).primary)
 
-	If STArray(i)(3) <> 0 Then
-		DTBallPhysics Activeball, STArray(i)(0).orientation, STMass
+	If STArray(i).animate <> 0 Then
+		DTBallPhysics Activeball, STArray(i).primary.orientation, STMass
 	End If
 	DoSTAnim
 End Sub
@@ -3914,7 +3973,7 @@
 Function STArrayID(switch)
 	Dim i
 	For i = 0 to uBound(STArray) 
-		If STArray(i)(2) = switch Then STArrayID = i:Exit Function 
+		If STArray(i).sw = switch Then STArrayID = i:Exit Function 
 	Next
 End Function
 
@@ -3943,7 +4002,7 @@
 Sub DoSTAnim()
 	Dim i
 	For i=0 to Ubound(STArray)
-		STArray(i)(3) = STAnimate(STArray(i)(0),STArray(i)(1),STArray(i)(2),STArray(i)(3))
+		STArray(i).animate = STAnimate(STArray(i).primary,STArray(i).prim,STArray(i).sw,STArray(i).animate)
 	Next
 End Sub
 
