--- ./AC-DC LUCI Premium VR (Stern 2013) v1.1/AC-DC LUCI Premium VR (Stern 2013) v1.1.vbs.original	2023-06-02 13:23:03
+++ ./AC-DC LUCI Premium VR (Stern 2013) v1.1/AC-DC LUCI Premium VR (Stern 2013) v1.1.vbs	2023-06-02 13:32:54
@@ -3445,7 +3445,40 @@
 '******************************************************
 '  DROP TARGETS INITIALIZATION
 '******************************************************
+
+Class DropTarget
+  Private m_primary, m_secondary, m_prim, m_sw, m_animate, m_isDropped
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(input): Set m_primary = input: End Property
+
+  Public Property Get Secondary(): Set Secondary = m_secondary: End Property
+  Public Property Let Secondary(input): Set m_secondary = input: End Property
+
+  Public Property Get Prim(): Set Prim = m_prim: End Property
+  Public Property Let Prim(input): Set m_prim = input: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(input): m_sw = input: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(input): m_animate = input: End Property
+
+  Public Property Get IsDropped(): IsDropped = m_isDropped: End Property
+  Public Property Let IsDropped(input): m_isDropped = input: End Property
 
+  Public default Function init(primary, secondary, prim, sw, animate, isDropped)
+    Set m_primary = primary
+    Set m_secondary = secondary
+    Set m_prim = prim
+    m_sw = sw
+    m_animate = animate
+    m_isDropped = isDropped
+
+    Set Init = Me
+  End Function
+End Class
+
 'Define a variable for each drop target
 Dim DT1, DT2, DT3, DT4, DT5, DT10, DT11, DT12
 
@@ -3464,15 +3497,16 @@
 '	animate:			Arrary slot for handling the animation instrucitons, set to 0
 '
 '	Values for annimate: 1 - bend target (hit to primary), 2 - drop target (hit to secondary), 3 - brick target (high velocity hit to secondary), -1 - raise target 
+'       isDropped:  Boolean which determines whether a drop target is dropped. Set to false if they are initially raised, true if initially dropped.
 
-DT1 = Array(sw1, sw1a, sw1p, 1, 0)
-DT2 = Array(sw2, sw2a, sw2p, 2, 0)
-DT3 = Array(sw3, sw3a, sw3p, 3, 0)
-DT4 = Array(sw4, sw4a, sw4p, 4, 0)
-DT5 = Array(sw5, sw5a, sw5p, 5, 0)
-DT10 = Array(sw10, sw10a, sw10p, 10, 0)
-DT11 = Array(sw11, sw11a, sw11p, 11, 0)
-DT12 = Array(sw12, sw12a, sw12p, 12, 0)
+Set DT1 = (new DropTarget)(sw1, sw1a, sw1p, 1, 0, false)
+Set DT2 = (new DropTarget)(sw2, sw2a, sw2p, 2, 0, false)
+Set DT3 = (new DropTarget)(sw3, sw3a, sw3p, 3, 0, false)
+Set DT4 = (new DropTarget)(sw4, sw4a, sw4p, 4, 0, false)
+Set DT5 = (new DropTarget)(sw5, sw5a, sw5p, 5, 0, false)
+Set DT10 = (new DropTarget)(sw10, sw10a, sw10p, 10, 0, false)
+Set DT11 = (new DropTarget)(sw11, sw11a, sw11p, 11, 0, false)
+Set DT12 = (new DropTarget)(sw12, sw12a, sw12p, 12, 0, false)
 
 
 Dim DTArray
@@ -3505,9 +3539,9 @@
 	i = DTArrayID(switch)
 
 	PlayTargetSound
-	DTArray(i)(4) =  DTCheckBrick(Activeball,DTArray(i)(2))
-	If DTArray(i)(4) = 1 or DTArray(i)(4) = 3 or DTArray(i)(4) = 4 Then
-		DTBallPhysics Activeball, DTArray(i)(2).rotz, DTMass
+	DTArray(i).animate =  DTCheckBrick(Activeball,DTArray(i).prim)
+	If DTArray(i).animate = 1 or DTArray(i).animate = 3 or DTArray(i).animate = 4 Then
+		DTBallPhysics Activeball, DTArray(i).prim.rotz, DTMass
 	End If
 	DoDTAnim
 End Sub
@@ -3516,7 +3550,7 @@
 	Dim i
 	i = DTArrayID(switch)
 
-	DTArray(i)(4) = -1
+	DTArray(i).animate = -1
 	DoDTAnim
 End Sub
 
@@ -3524,14 +3558,14 @@
 	Dim i
 	i = DTArrayID(switch)
 
-	DTArray(i)(4) = 1
+	DTArray(i).animate = 1
 	DoDTAnim
 End Sub
 
 Function DTArrayID(switch)
 	Dim i
 	For i = 0 to uBound(DTArray) 
-		If DTArray(i)(3) = switch Then DTArrayID = i:Exit Function 
+		If DTArray(i).sw = switch Then DTArrayID = i:Exit Function 
 	Next
 End Function
 
@@ -3586,7 +3620,7 @@
 Sub DoDTAnim()
 	Dim i
 	For i=0 to Ubound(DTArray)
-		DTArray(i)(4) = DTAnimate(DTArray(i)(0),DTArray(i)(1),DTArray(i)(2),DTArray(i)(3),DTArray(i)(4))
+		DTArray(i).animate = DTAnimate(DTArray(i).primary,DTArray(i).secondary,DTArray(i).prim,DTArray(i).sw,DTArray(i).animate)
 	Next
 End Sub
 
@@ -5301,17 +5335,23 @@
 
         if deltaX <> 0 then 
             u = (t - KeyX(i)) / deltaX
-        else u = 0 end if
+        else
+            u = 0 
+        end if
 
         z1 = (KeyX(i) - KeyX(i-1)) : z2 = (KeyX(i) - KeyX(i-1) )
         if z1 <> 0 and z2 <> 0 then ' check div0
             Keygrad1 = 0.5 * (KeyY(i) - KeyY(i-1)) / z1 + 0.5 * (KeyY(i+1) - KeyY(i) ) / z2
-        else keygrad1 = 0 end if
+        else 
+            keygrad1 = 0 
+        end if
 
         z1 = (KeyX(i+1) - KeyX(i)) : z2 = (KeyX(i+1) - KeyX(i) )
         if z1 <> 0 and z2 <> 0 then 
             Keygrad2 = 0.5 * (KeyY(i+1) - KeyY(i)) / z1 + 0.5 * (KeyY(i+2) - KeyY(i+1) ) / z2
-        else keygrad2 = 0 end if
+        else 
+            keygrad2 = 0 
+        end if
 
         if i >= uBound(KeyX)-1 then t = 0 : Lock = Not LoopAnim ' animation is done, reset time to 0
 
