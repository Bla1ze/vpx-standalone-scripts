--- Elvis_MOD_2.0.vbs.original
+++ Elvis_MOD_2.0.vbs
@@ -626,15 +626,48 @@
 ' Drop Targets
 ' ************************************
 
+Class DropTarget
+  Private m_primary, m_secondary, m_prim, m_sw, m_animate, m_isDropped
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(input): Set m_primary = input: End Property
+
+  Public Property Get Secondary(): Set Secondary = m_secondary: End Property
+  Public Property Let Secondary(input): Set m_secondary = input: End Property
+
+  Public Property Get Prim(): Set Prim = m_prim: End Property
+  Public Property Let Prim(input): Set m_prim = input: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(input): m_sw = input: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(input): m_animate = input: End Property
+
+  Public Property Get IsDropped(): IsDropped = m_isDropped: End Property
+  Public Property Let IsDropped(input): m_isDropped = input: End Property
+
+  Public default Function init(primary, secondary, prim, sw, animate, isDropped)
+    Set m_primary = primary
+    Set m_secondary = secondary
+    Set m_prim = prim
+    m_sw = sw
+    m_animate = animate
+    m_isDropped = isDropped
+
+    Set Init = Me
+  End Function
+End Class
+
 'Define a variable for each drop target
 
 Dim DT1, DT2, DT3, DT4, DT5
 
-DT1 = Array(sw17, sw17a, sw17p, 17, 0)
-DT2 = Array(sw18, sw18a, sw18p, 18, 0)
-DT3 = Array(sw19, sw19a, sw19p, 19, 0)
-DT4 = Array(sw20, sw20a, sw20p, 20, 0)
-DT5 = Array(sw21, sw21a, sw21p, 21, 0)
+Set DT1 = (new DropTarget)(sw17, sw17a, sw17p, 17, 0, false)
+Set DT2 = (new DropTarget)(sw18, sw18a, sw18p, 18, 0, false)
+Set DT3 = (new DropTarget)(sw19, sw19a, sw19p, 19, 0, false)
+Set DT4 = (new DropTarget)(sw20, sw20a, sw20p, 20, 0, false)
+Set DT5 = (new DropTarget)(sw21, sw21a, sw21p, 21, 0, false)
 
 
 Dim DTArray
@@ -675,9 +708,9 @@
         i = DTArrayID(switch)
 
         PlayTargetSound
-        DTArray(i)(4) =  DTCheckBrick(Activeball,DTArray(i)(2))
-        If DTArray(i)(4) = 1 or DTArray(i)(4) = 3 or DTArray(i)(4) = 4 Then
-                DTBallPhysics Activeball, DTArray(i)(2).rotz, DTMass
+        DTArray(i).animate =  DTCheckBrick(Activeball,DTArray(i).prim)
+        If DTArray(i).animate = 1 or DTArray(i).animate = 3 or DTArray(i).animate = 4 Then
+                DTBallPhysics Activeball, DTArray(i).prim.rotz, DTMass
         End If
         DoDTAnim
 End Sub
@@ -686,7 +719,7 @@
         Dim i
         i = DTArrayID(switch)
 
-        DTArray(i)(4) = -1
+        DTArray(i).animate = -1
         DoDTAnim
 End Sub
 
@@ -694,14 +727,14 @@
         Dim i
         i = DTArrayID(switch)
 
-        DTArray(i)(4) = 1
+        DTArray(i).animate = 1
         DoDTAnim
 End Sub
 
 Function DTArrayID(switch)
         Dim i
         For i = 0 to uBound(DTArray) 
-                If DTArray(i)(3) = switch Then DTArrayID = i:Exit Function 
+                If DTArray(i).sw = switch Then DTArrayID = i:Exit Function 
         Next
 End Function
 
@@ -756,7 +789,7 @@
 Sub DoDTAnim()
         Dim i
         For i=0 to Ubound(DTArray)
-                DTArray(i)(4) = DTAnimate(DTArray(i)(0),DTArray(i)(1),DTArray(i)(2),DTArray(i)(3),DTArray(i)(4))
+                DTArray(i).animate = DTAnimate(DTArray(i).primary,DTArray(i).secondary,DTArray(i).prim,DTArray(i).sw,DTArray(i).animate)
         Next
 End Sub
 
@@ -4893,17 +4926,17 @@
 	Public Property Get state(idx) : state = Lvl(idx) : end Property
 
 	'Mass assign, Builds arrays where necessary
-	Public Sub MassAssign(aIdx, aInput)
-		If typename(obj(aIdx)) = "NullFadingObject" Then 'if empty, use Set
-			if IsArray(aInput) then
-				obj(aIdx) = aInput
-			Else
-				Set obj(aIdx) = aInput
-			end if
-		Else
-			Obj(aIdx) = AppendArray(obj(aIdx), aInput)
-		end if	
-	end Sub
+	'Public Sub MassAssign(aIdx, aInput)
+	'	If typename(obj(aIdx)) = "NullFadingObject" Then 'if empty, use Set
+	'		if IsArray(aInput) then
+	'			obj(aIdx) = aInput
+	'		Else
+	'			Set obj(aIdx) = aInput
+	'		end if
+	'	Else
+	'		Obj(aIdx) = AppendArray(obj(aIdx), aInput)
+	'	end if	
+	'end Sub
 	
 	Public Property Let MassAssign(aIdx, aInput)
 		If typename(obj(aIdx)) = "NullFadingObject" Then 'if empty, use Set
