--- ./Class of 1812 (Gottlieb 1991) w VR Room v2.3/Class of 1812 (Gottlieb 1991) w VR Room v2.3.vbs.original	2023-06-01 21:10:55
+++ ./Class of 1812 (Gottlieb 1991) w VR Room v2.3/Class of 1812 (Gottlieb 1991) w VR Room v2.3.vbs	2023-06-01 21:10:55
@@ -2531,6 +2531,39 @@
 '******************************************************
 '  DROP TARGETS INITIALIZATION
 '******************************************************
+
+Class DropTarget
+  Private m_primary, m_secondary, m_prim, m_sw, m_animate, m_isDropped
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(input): Set m_primary = input: End Property
+
+  Public Property Get Secondary(): Set Secondary = m_secondary: End Property
+  Public Property Let Secondary(input): Set m_secondary = input: End Property
+
+  Public Property Get Prim(): Set Prim = m_prim: End Property
+  Public Property Let Prim(input): Set m_prim = input: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(input): m_sw = input: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(input): m_animate = input: End Property
+
+  Public Property Get IsDropped(): IsDropped = m_isDropped: End Property
+  Public Property Let IsDropped(input): m_isDropped = input: End Property
+
+  Public default Function init(primary, secondary, prim, sw, animate, isDropped)
+    Set m_primary = primary
+    Set m_secondary = secondary
+    Set m_prim = prim
+    m_sw = sw
+    m_animate = animate
+    m_isDropped = isDropped
+
+    Set Init = Me
+  End Function
+End Class
 
 'Define a variable for each drop target
 Dim DT16, DT17, DT26, DT27, DT36, DT37, DT46, DT47
@@ -2550,16 +2583,17 @@
 '	animate:			Arrary slot for handling the animation instrucitons, set to 0
 '
 '	Values for annimate: 1 - bend target (hit to primary), 2 - drop target (hit to secondary), 3 - brick target (high velocity hit to secondary), -1 - raise target 
+'       isDropped:  Boolean which determines whether a drop target is dropped. Set to false if they are initially raised, true if initially dropped.
 
 
-DT16 = Array(sw16, sw16a, sw16p, 16, 0)
-DT17 = Array(sw17, sw17a, sw17p, 17, 0)
-DT26 = Array(sw26, sw26a, sw26p, 26, 0)
-DT27 = Array(sw27, sw27a, sw27p, 27, 0)
-DT36 = Array(sw36, sw36a, sw36p, 36, 0)
-DT37 = Array(sw37, sw37a, sw37p, 37, 0)
-DT46 = Array(sw46, sw46a, sw46p, 46, 0)
-DT47 = Array(sw47, sw47a, sw47p, 47, 0)
+Set DT16 = (new DropTarget)(sw16, sw16a, sw16p, 16, 0, false)
+Set DT17 = (new DropTarget)(sw17, sw17a, sw17p, 17, 0, false)
+Set DT26 = (new DropTarget)(sw26, sw26a, sw26p, 26, 0, false)
+Set DT27 = (new DropTarget)(sw27, sw27a, sw27p, 27, 0, false)
+Set DT36 = (new DropTarget)(sw36, sw36a, sw36p, 36, 0, false)
+Set DT37 = (new DropTarget)(sw37, sw37a, sw37p, 37, 0, false)
+Set DT46 = (new DropTarget)(sw46, sw46a, sw46p, 46, 0, false)
+Set DT47 = (new DropTarget)(sw47, sw47a, sw47p, 47, 0, false)
 
 Dim DTArray
 DTArray = Array(DT16, DT17, DT26, DT27, DT36, DT37, DT46, DT47)
@@ -2590,9 +2624,9 @@
 	Dim i
 	i = DTArrayID(switch)
 	PlayTargetSound
-	DTArray(i)(4) =  DTCheckBrick(Activeball,DTArray(i)(2))
-	If DTArray(i)(4) = 1 or DTArray(i)(4) = 3 or DTArray(i)(4) = 4 Then
-		DTBallPhysics Activeball, DTArray(i)(2).rotz, DTMass
+	DTArray(i).animate =  DTCheckBrick(Activeball,DTArray(i).prim)
+	If DTArray(i).animate = 1 or DTArray(i).animate = 3 or DTArray(i).animate = 4 Then
+		DTBallPhysics Activeball, DTArray(i).prim.rotz, DTMass
 	End If
 	DoDTAnim
 End Sub
@@ -2600,21 +2634,21 @@
 Sub DTRaise(switch)
 	Dim i
 	i = DTArrayID(switch)
-	DTArray(i)(4) = -1
+	DTArray(i).animate = -1
 	DoDTAnim
 End Sub
 
 Sub DTDrop(switch)
 	Dim i
 	i = DTArrayID(switch)
-	DTArray(i)(4) = 1
+	DTArray(i).animate = 1
 	DoDTAnim
 End Sub
 
 Function DTArrayID(switch)
 	Dim i
 	For i = 0 to uBound(DTArray) 
-		If DTArray(i)(3) = switch Then DTArrayID = i:Exit Function 
+		If DTArray(i).sw = switch Then DTArrayID = i:Exit Function 
 	Next
 End Function
 
@@ -2669,7 +2703,7 @@
 Sub DoDTAnim()
 	Dim i
 	For i=0 to Ubound(DTArray)
-		DTArray(i)(4) = DTAnimate(DTArray(i)(0),DTArray(i)(1),DTArray(i)(2),DTArray(i)(3),DTArray(i)(4))
+		DTArray(i).animate = DTAnimate(DTArray(i).primary,DTArray(i).secondary,DTArray(i).prim,DTArray(i).sw,DTArray(i).animate)
 	Next
 End Sub
 
