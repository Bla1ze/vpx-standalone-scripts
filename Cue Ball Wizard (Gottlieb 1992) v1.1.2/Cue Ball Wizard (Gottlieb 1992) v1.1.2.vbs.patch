--- Cue Ball Wizard (Gottlieb 1992) v1.1.2.vbs.original
+++ Cue Ball Wizard (Gottlieb 1992) v1.1.2.vbs
@@ -1506 +1506,3 @@
-Sub kicker9_UnHit() NewBallid:End Sub
+Sub kicker9_UnHit()
+  NewBallid
+End Sub
@@ -3565,0 +3568,34 @@
+Class DropTarget
+  Private m_primary, m_secondary, m_prim, m_sw, m_animate, m_isDropped
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(input): Set m_primary = input: End Property
+
+  Public Property Get Secondary(): Set Secondary = m_secondary: End Property
+  Public Property Let Secondary(input): Set m_secondary = input: End Property
+
+  Public Property Get Prim(): Set Prim = m_prim: End Property
+  Public Property Let Prim(input): Set m_prim = input: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(input): m_sw = input: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(input): m_animate = input: End Property
+
+  Public Property Get IsDropped(): IsDropped = m_isDropped: End Property
+  Public Property Let IsDropped(input): m_isDropped = input: End Property
+
+  Public default Function init(primary, secondary, prim, sw, animate, isDropped)
+    Set m_primary = primary
+    Set m_secondary = secondary
+    Set m_prim = prim
+    m_sw = sw
+    m_animate = animate
+    m_isDropped = isDropped
+
+    Set Init = Me
+  End Function
+End Class
+
+
@@ -3583,0 +3620 @@
+'       isDropped:  Boolean which determines whether a drop target is dropped. Set to false if they are initially raised, true if initially dropped.
@@ -3586,7 +3623,7 @@
-DT36 = Array(sw36, sw36a, sw36p, 36, 0)
-DT35 = Array(sw35, sw35a, sw35p, 35, 0)
-DT25 = Array(sw25, sw25a, sw25p, 25, 0)
-DT34 = Array(sw34, sw34a, sw34p, 34, 0)
-DT24 = Array(sw24, sw24a, sw24p, 24, 0)
-DT33 = Array(sw33, sw33a, sw33p, 33, 0)
-DT23 = Array(sw23, sw23a, sw23p, 23, 0)
+Set DT36 = (new DropTarget)(sw36, sw36a, sw36p, 36, 0, false)
+Set DT35 = (new DropTarget)(sw35, sw35a, sw35p, 35, 0, false)
+Set DT25 = (new DropTarget)(sw25, sw25a, sw25p, 25, 0, false)
+Set DT34 = (new DropTarget)(sw34, sw34a, sw34p, 34, 0, false)
+Set DT24 = (new DropTarget)(sw24, sw24a, sw24p, 24, 0, false)
+Set DT33 = (new DropTarget)(sw33, sw33a, sw33p, 33, 0, false)
+Set DT23 = (new DropTarget)(sw23, sw23a, sw23p, 23, 0, false)
@@ -3595,7 +3632,7 @@
-DT20 = Array(sw20, sw20a, sw20p, 20, 0)
-DT30 = Array(sw30, sw30a, sw30p, 30, 0)
-DT21 = Array(sw21, sw21a, sw21p, 21, 0)
-DT31 = Array(sw31, sw31a, sw31p, 31, 0)
-DT22 = Array(sw22, sw22a, sw22p, 22, 0)
-DT32 = Array(sw32, sw32a, sw32p, 32, 0)
-DT26 = Array(sw26, sw26a, sw26p, 26, 0)
+Set DT20 = (new DropTarget)(sw20, sw20a, sw20p, 20, 0, false)
+Set DT30 = (new DropTarget)(sw30, sw30a, sw30p, 30, 0, false)
+Set DT21 = (new DropTarget)(sw21, sw21a, sw21p, 21, 0, false)
+Set DT31 = (new DropTarget)(sw31, sw31a, sw31p, 31, 0, false)
+Set DT22 = (new DropTarget)(sw22, sw22a, sw22p, 22, 0, false)
+Set DT32 = (new DropTarget)(sw32, sw32a, sw32p, 32, 0, false)
+Set DT26 = (new DropTarget)(sw26, sw26a, sw26p, 26, 0, false)
@@ -3633,3 +3670,3 @@
-	DTArray(i)(4) =  DTCheckBrick(Activeball,DTArray(i)(2))
-	If DTArray(i)(4) = 1 or DTArray(i)(4) = 3 or DTArray(i)(4) = 4 Then
-		DTBallPhysics Activeball, DTArray(i)(2).rotz, DTMass
+	DTArray(i).animate =  DTCheckBrick(Activeball,DTArray(i).prim)
+	If DTArray(i).animate = 1 or DTArray(i).animate = 3 or DTArray(i).animate = 4 Then
+		DTBallPhysics Activeball, DTArray(i).prim.rotz, DTMass
@@ -3644 +3681 @@
-	DTArray(i)(4) = -1
+	DTArray(i).animate = -1
@@ -3652 +3689 @@
-	DTArray(i)(4) = 1
+	DTArray(i).animate = 1
@@ -3659 +3696 @@
-		If DTArray(i)(3) = switch Then DTArrayID = i:Exit Function 
+		If DTArray(i).sw = switch Then DTArrayID = i:Exit Function 
@@ -3714 +3751 @@
-		DTArray(i)(4) = DTAnimate(DTArray(i)(0),DTArray(i)(1),DTArray(i)(2),DTArray(i)(3),DTArray(i)(4))
+		DTArray(i).animate = DTAnimate(DTArray(i).primary,DTArray(i).secondary,DTArray(i).prim,DTArray(i).sw,DTArray(i).animate)
@@ -3889,0 +3927,25 @@
+Class StandupTarget
+  Private m_primary, m_prim, m_sw, m_animate
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(input): Set m_primary = input: End Property
+
+  Public Property Get Prim(): Set Prim = m_prim: End Property
+  Public Property Let Prim(input): Set m_prim = input: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(input): m_sw = input: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(input): m_animate = input: End Property
+
+  Public default Function init(primary, prim, sw, animate)
+    Set m_primary = primary
+    Set m_prim = prim
+    m_sw = sw
+    m_animate = animate
+
+    Set Init = Me
+  End Function
+End Class
+
@@ -3906,22 +3968,22 @@
-ST16 = Array(sw16, sw16p,16, 0)
-ST111 = Array(sw111, psw111,111, 0)
-ST113 = Array(sw113, psw113,113, 0)
-ST115 = Array(sw115, psw115,115, 0)
-ST114 = Array(sw114, psw114,114, 0)
-ST1140 = Array(sw1140, psw1140,1140, 0)
-ST93 = Array(sw93, psw93,93, 0)
-ST930 = Array(sw930, psw930,930, 0)
-ST94 = Array(sw94, psw94,94, 0)
-ST95 = Array(sw95, psw95,95, 0)
-ST950 = Array(sw950, psw950,950, 0)
-ST96 = Array(sw96, psw96,96, 0)
-ST97 = Array(sw97, psw97,97, 0)
-ST970 = Array(sw970, psw970,970, 0)
-ST112 = Array(sw112, psw112,112, 0)
-ST1120 = Array(sw1120, psw1120,1120, 0)
-ST116 = Array(sw116, psw116,116, 0)
-ST1160 = Array(sw1160, psw1160,1160, 0)
-ST117 = Array(sw117, psw117,117, 0)
-ST1170 = Array(sw1170, psw1170,1170, 0)
-ST103 = Array(sw103, psw103,103, 0)
-ST1030 = Array(sw1030, psw1030,1030, 0)
+Set ST16 = (new StandupTarget)(sw16, sw16p,16, 0)
+Set ST111 = (new StandupTarget)(sw111, psw111,111, 0)
+Set ST113 = (new StandupTarget)(sw113, psw113,113, 0)
+Set ST115 = (new StandupTarget)(sw115, psw115,115, 0)
+Set ST114 = (new StandupTarget)(sw114, psw114,114, 0)
+Set ST1140 = (new StandupTarget)(sw1140, psw1140,1140, 0)
+Set ST93 = (new StandupTarget)(sw93, psw93,93, 0)
+Set ST930 = (new StandupTarget)(sw930, psw930,930, 0)
+Set ST94 = (new StandupTarget)(sw94, psw94,94, 0)
+Set ST95 = (new StandupTarget)(sw95, psw95,95, 0)
+Set ST950 = (new StandupTarget)(sw950, psw950,950, 0)
+Set ST96 = (new StandupTarget)(sw96, psw96,96, 0)
+Set ST97 = (new StandupTarget)(sw97, psw97,97, 0)
+Set ST970 = (new StandupTarget)(sw970, psw970,970, 0)
+Set ST112 = (new StandupTarget)(sw112, psw112,112, 0)
+Set ST1120 = (new StandupTarget)(sw1120, psw1120,1120, 0)
+Set ST116 = (new StandupTarget)(sw116, psw116,116, 0)
+Set ST1160 = (new StandupTarget)(sw1160, psw1160,1160, 0)
+Set ST117 = (new StandupTarget)(sw117, psw117,117, 0)
+Set ST1170 = (new StandupTarget)(sw1170, psw1170,1170, 0)
+Set ST103 = (new StandupTarget)(sw103, psw103,103, 0)
+Set ST1030 = (new StandupTarget)(sw1030, psw1030,1030, 0)
@@ -3949 +4011 @@
-	STArray(i)(3) =  STCheckHit(Activeball,STArray(i)(0))
+	STArray(i).animate =  STCheckHit(Activeball,STArray(i).primary)
@@ -3951,2 +4013,2 @@
-	If STArray(i)(3) <> 0 Then
-		DTBallPhysics Activeball, STArray(i)(0).orientation, STMass
+	If STArray(i).animate <> 0 Then
+		DTBallPhysics Activeball, STArray(i).primary.orientation, STMass
@@ -3960 +4022 @@
-		If STArray(i)(2) = switch Then STArrayID = i:Exit Function 
+		If STArray(i).sw = switch Then STArrayID = i:Exit Function 
@@ -3989 +4051 @@
-		STArray(i)(3) = STAnimate(STArray(i)(0),STArray(i)(1),STArray(i)(2),STArray(i)(3))
+		STArray(i).animate = STAnimate(STArray(i).primary,STArray(i).prim,STArray(i).sw,STArray(i).animate)
