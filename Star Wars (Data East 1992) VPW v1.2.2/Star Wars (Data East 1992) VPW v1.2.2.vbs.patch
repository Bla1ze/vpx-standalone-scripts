--- Star Wars (Data East 1992) VPW v1.2.2.vbs.original
+++ Star Wars (Data East 1992) VPW v1.2.2.vbs
@@ -3653,0 +3654 @@
+'       isDropped:  Boolean which determines whether a drop target is dropped. Set to false if they are initially raised, true if initially dropped.
@@ -3655,3 +3656,36 @@
-DT30 = Array(sw30, sw30off, sw30p, 30, 0)
-DT31 = Array(sw31, sw31off, sw31p, 31, 0)
-DT32 = Array(sw32, sw32off, sw32p, 32, 0)
+Class DropTarget
+  Private m_primary, m_secondary, m_prim, m_sw, m_animate, m_isDropped
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(input): Set m_primary = input: End Property
+
+  Public Property Get Secondary(): Set Secondary = m_secondary: End Property
+  Public Property Let Secondary(input): Set m_secondary = input: End Property
+
+  Public Property Get Prim(): Set Prim = m_prim: End Property
+  Public Property Let Prim(input): Set m_prim = input: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(input): m_sw = input: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(input): m_animate = input: End Property
+
+  Public Property Get IsDropped(): IsDropped = m_isDropped: End Property
+  Public Property Let IsDropped(input): m_isDropped = input: End Property
+
+  Public default Function init(primary, secondary, prim, sw, animate, isDropped)
+    Set m_primary = primary
+    Set m_secondary = secondary
+    Set m_prim = prim
+    m_sw = sw
+    m_animate = animate
+    m_isDropped = isDropped
+
+    Set Init = Me
+  End Function
+End Class
+
+Set DT30 = (new DropTarget)(sw30, sw30off, sw30p, 30, 0, false)
+Set DT31 = (new DropTarget)(sw31, sw31off, sw31p, 31, 0, false)
+Set DT32 = (new DropTarget)(sw32, sw32off, sw32p, 32, 0, false)
@@ -3688,3 +3722,3 @@
-	DTArray(i)(4) =  DTCheckBrick(Activeball,DTArray(i)(2))
-	If DTArray(i)(4) = 1 or DTArray(i)(4) = 3 or DTArray(i)(4) = 4 Then
-		DTBallPhysics Activeball, DTArray(i)(2).rotz, DTMass
+	DTArray(i).animate =  DTCheckBrick(Activeball,DTArray(i).prim)
+	If DTArray(i).animate = 1 or DTArray(i).animate = 3 or DTArray(i).animate = 4 Then
+		DTBallPhysics Activeball, DTArray(i).prim.rotz, DTMass
@@ -3699 +3733 @@
-	DTArray(i)(4) = -1
+	DTArray(i).animate = -1
@@ -3707 +3741 @@
-	DTArray(i)(4) = 1
+	DTArray(i).animate = 1
@@ -3714 +3748 @@
-		If DTArray(i)(3) = switch Then DTArrayID = i:Exit Function 
+		If DTArray(i).sw = switch Then DTArrayID = i:Exit Function 
@@ -3780 +3814 @@
-		DTArray(i)(4) = DTAnimate(DTArray(i)(0),DTArray(i)(1),DTArray(i)(2),DTArray(i)(3),DTArray(i)(4))
+		DTArray(i).animate = DTAnimate(DTArray(i).primary,DTArray(i).secondary,DTArray(i).prim,DTArray(i).sw,DTArray(i).animate)
@@ -3960,0 +3995,30 @@
+Class StandupTarget
+  Private m_primary, m_prim, m_sw, m_animate, m_target
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(input): Set m_primary = input: End Property
+
+  Public Property Get Prim(): Set Prim = m_prim: End Property
+  Public Property Let Prim(input): Set m_prim = input: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(input): m_sw = input: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(input): m_animate = input: End Property
+
+  Public Property Get Target(): Target = m_target: End Property
+  Public Property Let Target(input): m_target = input: End Property
+
+  Public default Function init(primary, prim, sw, animate, target)
+    Set m_primary = primary
+    Set m_prim = prim
+    m_sw = sw
+    m_animate = animate
+    m_target = target
+
+    Set Init = Me
+  End Function
+End Class
+
+
@@ -3975,5 +4039,5 @@
-ST25 = Array(sw25, sw25p, 25, 0, 25)
-ST26 = Array(sw26, sw26p, 26, 0, 26)
-ST27 = Array(sw27, sw27p, 27, 0, 27)
-ST28 = Array(sw28, sw28p, 28, 0, 28)
-ST29 = Array(sw29, sw29p, 29, 0, 29)
+Set ST25 = (new StandupTarget)(sw25, sw25p, 25, 0, 25)
+Set ST26 = (new StandupTarget)(sw26, sw26p, 26, 0, 26)
+Set ST27 = (new StandupTarget)(sw27, sw27p, 27, 0, 27)
+Set ST28 = (new StandupTarget)(sw28, sw28p, 28, 0, 28)
+Set ST29 = (new StandupTarget)(sw29, sw29p, 29, 0, 29)
@@ -4001 +4065 @@
-	STArray(i)(3) =  STCheckHit(Activeball,STArray(i)(0))
+	STArray(i).animate =  STCheckHit(Activeball,STArray(i).primary)
@@ -4003,2 +4067,2 @@
-	If STArray(i)(3) <> 0 Then
-		DTBallPhysics Activeball, STArray(i)(0).orientation, STMass
+	If STArray(i).animate <> 0 Then
+		DTBallPhysics Activeball, STArray(i).primary.orientation, STMass
@@ -4012 +4076 @@
-		If STArray(i)(4) = switch Then STArrayID = i:Exit Function 
+		If STArray(i).target = switch Then STArrayID = i:Exit Function 
@@ -4036 +4100 @@
-		STArray(i)(3) = STAnimate(STArray(i)(0),STArray(i)(1),STArray(i)(2),STArray(i)(3))
+		STArray(i).animate = STAnimate(STArray(i).primary,STArray(i).prim,STArray(i).sw,STArray(i).animate)
