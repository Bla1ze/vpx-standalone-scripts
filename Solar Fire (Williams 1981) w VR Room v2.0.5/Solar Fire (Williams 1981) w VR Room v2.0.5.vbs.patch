--- Solar Fire (Williams 1981) w VR Room v2.0.5.vbs.original
+++ Solar Fire (Williams 1981) w VR Room v2.0.5.vbs
@@ -2400,0 +2401,33 @@
+Class DropTarget
+  Private m_primary, m_secondary, m_prim, m_sw, m_animate, m_isDropped
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(input): Set m_primary = input: End Property
+
+  Public Property Get Secondary(): Set Secondary = m_secondary: End Property
+  Public Property Let Secondary(input): Set m_secondary = input: End Property
+
+  Public Property Get Prim(): Set Prim = m_prim: End Property
+  Public Property Let Prim(input): Set m_prim = input: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(input): m_sw = input: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(input): m_animate = input: End Property
+
+  Public Property Get IsDropped(): IsDropped = m_isDropped: End Property
+  Public Property Let IsDropped(input): m_isDropped = input: End Property
+
+  Public default Function init(primary, secondary, prim, sw, animate, isDropped)
+    Set m_primary = primary
+    Set m_secondary = secondary
+    Set m_prim = prim
+    m_sw = sw
+    m_animate = animate
+    m_isDropped = isDropped
+
+    Set Init = Me
+  End Function
+End Class
+
@@ -2422,13 +2455,13 @@
-DT27 = Array(sw27, sw27a, sw27p, 27, 0)
-DT28 = Array(sw28, sw28a, sw28p, 28, 0)
-DT29 = Array(sw29, sw29a, sw29p, 29, 0)
-DT30 = Array(sw30, sw30a, sw30p, 30, 0)
-DT31 = Array(sw31, sw31a, sw31p, 31, 0)
-DT32 = Array(sw32, sw32a, sw32p, 32, 0)
-DT33 = Array(sw33, sw33a, sw33p, 33, 0)
-DT34 = Array(sw34, sw34a, sw34p, 34, 0)
-DT35 = Array(sw35, sw35a, sw35p, 35, 0)
-DT36 = Array(sw36, sw36a, sw36p, 36, 0)
-DT37 = Array(sw37, sw37a, sw37p, 37, 0)
-DT38 = Array(sw38, sw38a, sw38p, 38, 0)
-DT39 = Array(sw39, sw39a, sw39p, 39, 0)
+Set DT27 = (new DropTarget)(sw27, sw27a, sw27p, 27, 0, false)
+Set DT28 = (new DropTarget)(sw28, sw28a, sw28p, 28, 0, false)
+Set DT29 = (new DropTarget)(sw29, sw29a, sw29p, 29, 0, false)
+Set DT30 = (new DropTarget)(sw30, sw30a, sw30p, 30, 0, false)
+Set DT31 = (new DropTarget)(sw31, sw31a, sw31p, 31, 0, false)
+Set DT32 = (new DropTarget)(sw32, sw32a, sw32p, 32, 0, false)
+Set DT33 = (new DropTarget)(sw33, sw33a, sw33p, 33, 0, false)
+Set DT34 = (new DropTarget)(sw34, sw34a, sw34p, 34, 0, false)
+Set DT35 = (new DropTarget)(sw35, sw35a, sw35p, 35, 0, false)
+Set DT36 = (new DropTarget)(sw36, sw36a, sw36p, 36, 0, false)
+Set DT37 = (new DropTarget)(sw37, sw37a, sw37p, 37, 0, false)
+Set DT38 = (new DropTarget)(sw38, sw38a, sw38p, 38, 0, false)
+Set DT39 = (new DropTarget)(sw39, sw39a, sw39p, 39, 0, false)
@@ -2466,3 +2499,3 @@
-	DTArray(i)(4) =  DTCheckBrick(Activeball,DTArray(i)(2))
-	If DTArray(i)(4) = 1 or DTArray(i)(4) = 3 or DTArray(i)(4) = 4 Then
-		DTBallPhysics Activeball, DTArray(i)(2).rotz, DTMass
+	DTArray(i).animate =  DTCheckBrick(Activeball,DTArray(i).prim)
+	If DTArray(i).animate = 1 or DTArray(i).animate = 3 or DTArray(i).animate = 4 Then
+		DTBallPhysics Activeball, DTArray(i).prim.rotz, DTMass
@@ -2477 +2510 @@
-	DTArray(i)(4) = -1
+	DTArray(i).animate = -1
@@ -2485 +2518 @@
-	DTArray(i)(4) = 1
+	DTArray(i).animate = 1
@@ -2492 +2525 @@
-		If DTArray(i)(3) = switch Then DTArrayID = i:Exit Function 
+		If DTArray(i).sw = switch Then DTArrayID = i:Exit Function 
@@ -2547 +2580 @@
-		DTArray(i)(4) = DTAnimate(DTArray(i)(0),DTArray(i)(1),DTArray(i)(2),DTArray(i)(3),DTArray(i)(4))
+		DTArray(i).animate = DTAnimate(DTArray(i).primary,DTArray(i).secondary,DTArray(i).prim,DTArray(i).sw,DTArray(i).animate)
@@ -2740,0 +2774,25 @@
+Class StandupTarget
+  Private m_primary, m_prim, m_sw, m_animate
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(input): Set m_primary = input: End Property
+
+  Public Property Get Prim(): Set Prim = m_prim: End Property
+  Public Property Let Prim(input): Set m_prim = input: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(input): m_sw = input: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(input): m_animate = input: End Property
+
+  Public default Function init(primary, prim, sw, animate)
+    Set m_primary = primary
+    Set m_prim = prim
+    m_sw = sw
+    m_animate = animate
+
+    Set Init = Me
+  End Function
+End Class
+
@@ -2759,2 +2817,2 @@
-ST25 = Array(sw25, psw25,25, 0)
-ST41 = Array(sw41, psw41,41, 0)
+Set ST25 = (new StandupTarget)(sw25, psw25,25, 0)
+Set ST41 = (new StandupTarget)(sw41, psw41,41, 0)
@@ -2781 +2839 @@
-	STArray(i)(3) =  STCheckHit(Activeball,STArray(i)(0))
+	STArray(i).animate =  STCheckHit(Activeball,STArray(i).primary)
@@ -2783,2 +2841,2 @@
-	If STArray(i)(3) <> 0 Then
-		DTBallPhysics Activeball, STArray(i)(0).orientation, STMass
+	If STArray(i).animate <> 0 Then
+		DTBallPhysics Activeball, STArray(i).primary.orientation, STMass
@@ -2792 +2850 @@
-		If STArray(i)(2) = switch Then STArrayID = i:Exit Function 
+		If STArray(i).sw = switch Then STArrayID = i:Exit Function 
@@ -2821 +2879 @@
-		STArray(i)(3) = STAnimate(STArray(i)(0),STArray(i)(1),STArray(i)(2),STArray(i)(3))
+		STArray(i).animate = STAnimate(STArray(i).primary,STArray(i).prim,STArray(i).sw,STArray(i).animate)
